diff --git a/src/cloth.cpp b/src/cloth.cpp
index 8c1d42f..9cac2a3 100644
--- a/src/cloth.cpp
+++ b/src/cloth.cpp
@@ -102,42 +102,7 @@ void Cloth::initializeSpring() {
     }
   }
 
-  for (int i = 0; i < particlesPerEdge - 1; ++i) {
-    for (int j = 0; j < particlesPerEdge; ++j) {
-      int index = i * particlesPerEdge + j;
-      _springs.emplace_back(index, index + particlesPerEdge, structrualLength, Spring::Type::STRUCTURAL);
-    }
-  }
-
-  float shearLength = (_particles.position(0) - _particles.position(particlesPerEdge + 1)).norm();
-  for (int i = 0; i < particlesPerEdge - 1; ++i) {
-    for (int j = 0; j < particlesPerEdge - 1; ++j) {
-      int index = i * particlesPerEdge + j;
-      _springs.emplace_back(index, index + particlesPerEdge + 1, shearLength, Spring::Type::SHEAR);
-    }
-  }
-
-  for (int i = 0; i < particlesPerEdge - 1; ++i) {
-    for (int j = 1; j < particlesPerEdge; ++j) {
-      int index = i * particlesPerEdge + j;
-      _springs.emplace_back(index, index + particlesPerEdge - 1, shearLength, Spring::Type::SHEAR);
-    }
-  }
-
-  float bendLength = (_particles.position(0) - _particles.position(2)).norm();
-  for (int i = 0; i < particlesPerEdge; ++i) {
-    for (int j = 0; j < particlesPerEdge - 2; ++j) {
-      int index = i * particlesPerEdge + j;
-      _springs.emplace_back(index, index + 2, bendLength, Spring::Type::BEND);
-    }
-  }
-
-  for (int i = 0; i < particlesPerEdge - 2; ++i) {
-    for (int j = 0; j < particlesPerEdge; ++j) {
-      int index = i * particlesPerEdge + j;
-      _springs.emplace_back(index, index + 2 * particlesPerEdge, bendLength, Spring::Type::BEND);
-    }
-  }
+  // Write code here!
 
   std::vector<GLuint> structrualIndices, shearIndices, bendIndices;
   for (const auto& spring : _springs) {
@@ -173,20 +138,7 @@ void Cloth::computeSpringForce() {
   //          a.normalized() will create a new vector.
   //   3. Use a.dot(b) to get dot product of a and b.
   for (const auto& spring : _springs) {
-    int startID = spring.startParticleIndex();
-    int endID = spring.endParticleIndex();
-    Eigen::Vector4f direction = _particles.position(startID) - _particles.position(endID);
-    Eigen::Vector4f relativeVelocity = _particles.velocity(startID) - _particles.velocity(endID);
-    // Spring force
-    float currentLength = direction.norm();               // |Xa - Xb|
-    direction.normalize();                                // Unit L
-    float deltaLength = currentLength - spring.length();  // deltaL
-    // Damper force
-    float deltaVelocity = relativeVelocity.dot(direction);
-    Eigen::Vector4f internalForce = direction * (damperCoef * deltaVelocity + springCoef * deltaLength);
-
-    _particles.acceleration(startID) -= internalForce * _particles.inverseMass(startID);
-    _particles.acceleration(endID) += internalForce * _particles.inverseMass(endID);
+    // Write code here!
   }
 }
 
diff --git a/src/integrator.cpp b/src/integrator.cpp
index 13a05ad..6e96854 100644
--- a/src/integrator.cpp
+++ b/src/integrator.cpp
@@ -10,10 +10,9 @@ void ExplicitEuler::integrate(const std::vector<Particles *> &particles, std::fu
   // Note:
   //   1. You don't need the simulation function in explicit euler.
   //   2. You should do this first because it is very simple. Then you can chech your collision is correct or not.
-  //   3. This can be done in 5 lines. (Hint: You can add / multiply all particles at once since it is a large matrix.)
+  //   3. This can be done in 2 lines. (Hint: You can add / multiply all particles at once since it is a large matrix.)
   for (const auto &p : particles) {
-    p->position() += p->velocity() * deltaTime;
-    p->velocity() += p->acceleration() * deltaTime;
+    // Write code here!
   }
 }
 
@@ -25,17 +24,8 @@ void ImplicitEuler::integrate(const std::vector<Particles *> &particles,
   //   3. Compute refined Xn+1 using (1.) and (2.).
   // Note:
   //   1. Use simulateOneStep with modified position and velocity to get Xn+1.
-  std::vector<Particles> current;
-  for (const auto &p : particles) {
-    current.emplace_back(*p);
-    p->position() += p->velocity() * deltaTime;
-    p->velocity() += p->acceleration() * deltaTime;
-  }
-  simulateOneStep();
-  for (size_t i = 0; i < current.size(); ++i) {
-    particles[i]->position() = current[i].position() + particles[i]->velocity() * deltaTime;
-    particles[i]->velocity() = current[i].velocity() + particles[i]->acceleration() * deltaTime;
-  }
+
+  // Write code here!
 }
 
 void MidpointEuler::integrate(const std::vector<Particles *> &particles,
@@ -46,17 +36,8 @@ void MidpointEuler::integrate(const std::vector<Particles *> &particles,
   //   3. Compute refined Xn+1 using (1.) and (2.).
   // Note:
   //   1. Use simulateOneStep with modified position and velocity to get Xn+1.
-  std::vector<Particles> current;
-  for (const auto &p : particles) {
-    current.emplace_back(*p);
-    p->position() += p->velocity() * deltaTime * 0.5f;
-    p->velocity() += p->acceleration() * deltaTime * 0.5f;
-  }
-  simulateOneStep();
-  for (size_t i = 0; i < current.size(); ++i) {
-    particles[i]->position() = current[i].position() + particles[i]->velocity() * deltaTime;
-    particles[i]->velocity() = current[i].velocity() + particles[i]->acceleration() * deltaTime;
-  }
+
+  // Write code here!
 }
 
 void RungeKuttaFourth::integrate(const std::vector<Particles *> &particles,
@@ -67,47 +48,6 @@ void RungeKuttaFourth::integrate(const std::vector<Particles *> &particles,
   //   3. Compute refined Xn+1 using (1.) and (2.).
   // Note:
   //   1. Use simulateOneStep with modified position and velocity to get Xn+1.
-  std::vector<Particles> current;
-  for (const auto &p : particles) current.emplace_back(*p);
-  // k1
-  std::vector<Particles> k1(current);
-  for (size_t i = 0; i < current.size(); ++i) {
-    k1[i].position() = particles[i]->velocity() * deltaTime;
-    k1[i].velocity() = particles[i]->acceleration() * deltaTime;
-    particles[i]->position() = current[i].position() + k1[i].position() * 0.5f;
-    particles[i]->velocity() = current[i].velocity() + k1[i].velocity() * 0.5f;
-  }
-  simulateOneStep();
-  // k2
-  std::vector<Particles> k2(current);
-  for (size_t i = 0; i < current.size(); ++i) {
-    k2[i].position() = particles[i]->velocity() * deltaTime;
-    k2[i].velocity() = particles[i]->acceleration() * deltaTime;
-    particles[i]->position() = current[i].position() + k2[i].position() * 0.5f;
-    particles[i]->velocity() = current[i].velocity() + k2[i].velocity() * 0.5f;
-  }
-  simulateOneStep();
-  // k3
-  std::vector<Particles> k3(current);
-  for (size_t i = 0; i < current.size(); ++i) {
-    k3[i].position() = particles[i]->velocity() * deltaTime;
-    k3[i].velocity() = particles[i]->acceleration() * deltaTime;
-    particles[i]->position() = current[i].position() + k3[i].position();
-    particles[i]->velocity() = current[i].velocity() + k3[i].velocity();
-  }
-  simulateOneStep();
-  // k4
-  std::vector<Particles> k4(current);
-  for (size_t i = 0; i < current.size(); ++i) {
-    k4[i].position() = particles[i]->velocity() * deltaTime;
-    k4[i].velocity() = particles[i]->acceleration() * deltaTime;
-
-    particles[i]->position() =
-        current[i].position() +
-        (k1[i].position() + 2.0f * k2[i].position() + 2.0f * k3[i].position() + k4[i].position()) / 6.0f;
 
-    particles[i]->velocity() =
-        current[i].velocity() +
-        (k1[i].velocity() + 2.0f * k2[i].velocity() + 2.0f * k3[i].velocity() + k4[i].velocity()) / 6.0f;
-  }
+  // Write code here!
 }
diff --git a/src/sphere.cpp b/src/sphere.cpp
index 6f66866..89d52b2 100644
--- a/src/sphere.cpp
+++ b/src/sphere.cpp
@@ -124,28 +124,14 @@ void Spheres::collide(Cloth* cloth) {
   //   1. There are `sphereCount` spheres.
   //   2. There are `particlesPerEdge * particlesPerEdge` particles.
   //   3. See TODOs in Cloth::computeSpringForce if you don't know how to access data.
-  for (int i = 0; i < sphereCount; ++i) {
-    float inverseSphereMass = _particles.inverseMass(i);
-    for (int j = 0; j < particlesPerEdge * particlesPerEdge; ++j) {
-      float inverseClothMass = cloth->particles().inverseMass(j);
-      Eigen::Vector4f normal = _particles.position(i) - cloth->particles().position(j);
-      Eigen::Vector4f relativeVelocity = _particles.velocity(i) - cloth->particles().velocity(j);
-      float distance = normal.norm();
-      float penetration = _radius[i] - distance;
-      if (penetration < 0) continue;
-      normal.normalize();
-      Eigen::Vector4f normalVelocity = normal * relativeVelocity.dot(normal);
-
-      if (relativeVelocity.dot(normal) < 0) {
-        Eigen::Vector4f impulse = -(1 + coefRestitution) * normalVelocity / (inverseClothMass + inverseSphereMass);
-        _particles.velocity(i) += impulse * inverseSphereMass;
-        cloth->particles().velocity(j) -= impulse * inverseClothMass;
-      }
-      Eigen::Vector4f correction = penetration * normal * 0.15f;
-      _particles.position(i) += correction;
-      cloth->particles().position(j) -= correction;
-    }
-  }
+  // Hint:
+  //   1. You can simply push particles back to prevent penetration.
+  //     Sample code is provided here:
+  //       Eigen::Vector4f correction = penetration * normal * 0.15f;
+  //       _particles.position(i) += correction;
+  //       _particles.position(j) -= correction;
+
+  // Write code here!
 }
 
 void Spheres::collide() {
@@ -158,27 +144,8 @@ void Spheres::collide() {
   //   1. There are `sphereCount` spheres.
   //   2. You may not want to calculate one sphere twice (a <-> b and b <-> a)
   //   3. See TODOs in Cloth::computeSpringForce if you don't know how to access data.
-  for (int i = 0; i < sphereCount; ++i) {
-    float inverseSphere1Mass = _particles.inverseMass(i);
-    for (int j = i + 1; j < sphereCount; ++j) {
-      float inverseSphere2Mass = _particles.inverseMass(j);
-
-      Eigen::Vector4f normal = _particles.position(i) - _particles.position(j);
-      Eigen::Vector4f relativeVelocity = _particles.velocity(i) - _particles.velocity(j);
-      float distance = normal.norm();
-      float penetration = (_radius[i] + _radius[j]) - distance;
-      if (penetration < 0) continue;
-      normal.normalize();
-      Eigen::Vector4f normalVelocity = normal * relativeVelocity.dot(normal);
-
-      if (relativeVelocity.dot(normal) < 0) {
-        Eigen::Vector4f impulse = -(1 + coefRestitution) * normalVelocity / (inverseSphere1Mass + inverseSphere2Mass);
-        _particles.velocity(i) += impulse * inverseSphere1Mass;
-        _particles.velocity(j) -= impulse * inverseSphere2Mass;
-      }
-      Eigen::Vector4f correction = penetration * normal * 0.15f;
-      _particles.position(i) += correction;
-      _particles.position(j) -= correction;
-    }
-  }
+  // Hint:
+  //   1. You can simply push particles back to prevent penetration.
+
+  // Write code here!
 }
